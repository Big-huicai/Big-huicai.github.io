<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[Vue略懂系列]-组件通讯及插槽</title>
      <link href="/2020/07/30/Vue%E7%95%A5%E6%87%82%E7%B3%BB%E5%88%97-%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF%E5%8F%8A%E6%8F%92%E6%A7%BD/"/>
      <url>/2020/07/30/Vue%E7%95%A5%E6%87%82%E7%B3%BB%E5%88%97-%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF%E5%8F%8A%E6%8F%92%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h1><p>　　要用vue，就不得不提起它得组件化，万物皆组件，组件多了就不可避免的要串串门聊聊天啥的，这不串不要紧啊，这一串门，就出了大问题，到爷爷家该怎么打招呼呀，到兄弟家该怎么唠唠嗑，父子，兄弟，祖孙，曾曾祖孙，该守得规矩还得守，顿时是一个头变得两个大。</p><p><img src= "/img/loading.gif" data-src="https://imgkr.cn-bj.ufileos.com/c56fb500-b587-480f-8c77-8ee775fe206d.jfif" alt="avatar"></p><p>　　但是，作为一个打小品(lan)学(de)兼(dong)优(nao)的三好学生,怎么会被这点困难所打到，来个12345，安排的明明白白:</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="1-父子传值"><a href="#1-父子传值" class="headerlink" title="1.父子传值"></a>1.父子传值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; child</span><br><span class="line">props: &#123; msg: String &#125;</span><br><span class="line">&#x2F;&#x2F; parent</span><br><span class="line">&lt;Children msg&#x3D;&quot;Hollo vue&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="2-子给父传值"><a href="#2-子给父传值" class="headerlink" title="2.子给父传值"></a>2.子给父传值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; child</span><br><span class="line">this.$emit(&#39;add&#39;, good)</span><br><span class="line">&#x2F;&#x2F; parent</span><br><span class="line">&lt;Children @add&#x3D;&quot;cartAdd($event)&quot;&gt;&lt;&#x2F;Children&gt;</span><br></pre></td></tr></table></figure><h3 id="3-任意两组件传值"><a href="#3-任意两组件传值" class="headerlink" title="3.任意两组件传值"></a>3.任意两组件传值</h3><p>这里有两个常用的方法，</p><h4 id="方法1：事件总线"><a href="#方法1：事件总线" class="headerlink" title="方法1：事件总线"></a>方法1：事件总线</h4><p>适用于比较简单的项目</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">Vue.prototype.bus &#x3D; new Vue()</span><br><span class="line">&#x2F;&#x2F; child1</span><br><span class="line">this.$bus.$on(&#39;foo&#39;, handle) </span><br><span class="line">&#x2F;&#x2F; child2</span><br><span class="line">this.$bus.$emit(&#39;foo&#39;)</span><br></pre></td></tr></table></figure><h4 id="方法2：vuex"><a href="#方法2：vuex" class="headerlink" title="方法2：vuex"></a>方法2：vuex</h4><p>创建唯一的全局数据管理者store，通过它管理数据并通知组件状态变更。</p><p>　　常用的到这里就结束了，但是，我们怎么能就止于此呢，既然要略懂略懂，那么不得在懂点什么吗，比如接下来的：</p><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><h3 id="4-兄弟组件通讯-parent-root"><a href="#4-兄弟组件通讯-parent-root" class="headerlink" title="4.兄弟组件通讯 $parent/$root"></a>4.兄弟组件通讯 $parent/$root</h3><p>兄弟组件之间通信可通过共同祖辈搭桥，$parent或$root。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; brother1</span><br><span class="line">this.$parent.$on(&#39;foo&#39;, handle) </span><br><span class="line">&#x2F;&#x2F; brother2</span><br><span class="line">this.$parent.$emit(&#39;foo&#39;)</span><br></pre></td></tr></table></figure><h3 id="5-父子通信-children"><a href="#5-父子通信-children" class="headerlink" title="5.父子通信 $children"></a>5.父子通信 $children</h3><p>父组件可以通过$children访问子组件实现父子通信。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; parent</span><br><span class="line">this.$children[0].xx &#x3D; &#39;xxx&#39;</span><br></pre></td></tr></table></figure><p>*[注释]：$children不能保证子元素顺序</p><h3 id="6-attrs-listeners"><a href="#6-attrs-listeners" class="headerlink" title="6.$attrs/$listeners"></a>6.$attrs/$listeners</h3><p>包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class和style除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class和style除外)，并且可以通过v-bind=”$attrs”传入内部组件——在创建高级别的组件时非常有用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; child：并未在props中声明foo</span><br><span class="line">&lt;p&gt;&#123;&#123;$attrs.foo&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; parent</span><br><span class="line">&lt;HelloWorld foo&#x3D;&quot;foo&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="7-获取子节点引用-refs"><a href="#7-获取子节点引用-refs" class="headerlink" title="7.获取子节点引用 refs"></a>7.获取子节点引用 refs</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; parent</span><br><span class="line">&lt;HelloWorld ref&#x3D;&quot;hw&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">mounted() &#123;  </span><br><span class="line">  this.$refs.hw.xx &#x3D; &#39;xxx&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-祖先和后代之间传值-provide-inject"><a href="#8-祖先和后代之间传值-provide-inject" class="headerlink" title="8.祖先和后代之间传值 provide/inject"></a>8.祖先和后代之间传值 provide/inject</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ancestor</span><br><span class="line">provide() &#123;</span><br><span class="line">  return &#123;foo: &#39;foo&#39;</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; descendant</span><br><span class="line">inject: [&#39;foo&#39;]</span><br></pre></td></tr></table></figure><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>　　插槽语法是Vue 实现的内容分发 API，用于复合组件开发。该技术在通用组件库开发中有大量应用。</p><h3 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; comp1</span><br><span class="line">&lt;div&gt;  </span><br><span class="line">  &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; parent</span><br><span class="line">&lt;comp&gt;hello&lt;&#x2F;comp&gt;</span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>将内容分发到子组件指定位置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; comp2</span><br><span class="line">&lt;div&gt;  </span><br><span class="line">  &lt;slot&gt;&lt;&#x2F;slot&gt;  </span><br><span class="line">  &lt;slot name&#x3D;&quot;content&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; parent</span><br><span class="line">&lt;Comp2&gt;</span><br><span class="line">  &lt;!-- 默认插槽用default做参数 --&gt;</span><br><span class="line">  &lt;template v-slot:default&gt;具名插槽&lt;&#x2F;template&gt;</span><br><span class="line">  &lt;!-- 具名插槽用插槽名做参数 --&gt;</span><br><span class="line">  &lt;template v-slot:content&gt;内容...&lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;Comp2&gt;</span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>分发内容要用到子组件中的数据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; comp3</span><br><span class="line">&lt;div&gt;  </span><br><span class="line">  &lt;slot :foo&#x3D;&quot;foo&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F; parent</span><br><span class="line">&lt;Comp3&gt;</span><br><span class="line">  &lt;!-- 把v-slot的值指定为作用域上下文对象 --&gt;</span><br><span class="line">  &lt;template v-slot:default&#x3D;&quot;slotProps&quot;&gt;来自子组件数据：&#123;&#123;slotProps.foo&#125;&#125;&lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;Comp3&gt;</span><br></pre></td></tr></table></figure><p>　　组件通讯方式及插槽的一些简单介绍就到此结束,方便自己之后的复盘与学习查看, skr~</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开博</title>
      <link href="/2020/07/16/%E5%BC%80%E5%8D%9A/"/>
      <url>/2020/07/16/%E5%BC%80%E5%8D%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="记录与分享成长的过程"><a href="#记录与分享成长的过程" class="headerlink" title="记录与分享成长的过程"></a>记录与分享成长的过程</h2><ol><li>专业技能学习</li><li>生活分享</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
